{"version":3,"names":["React","Platform","NativeBlurhashModule","NativeBlurhashView","decode83","decodeDC","isBlurhashValid","Blurhash","PureComponent","constructor","props","_onLoadStart","bind","_onLoadEnd","_onLoadError","encode","imageUri","componentsX","componentsY","Error","createBlurhashFromImage","getAverageColor","blurhash","length","undefined","value","substring","clearCosineCache","OS","console","warn","onLoadStart","onLoadEnd","event","_event$nativeEvent","onLoadError","nativeEvent","message","render","createElement","_extends","_defineProperty"],"sources":["index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, type NativeSyntheticEvent, type ViewProps } from 'react-native';\nimport NativeBlurhashModule from './specs/NativeBlurhashModule';\nimport NativeBlurhashView from './specs/NativeBlurhashView';\nimport { decode83, decodeDC, isBlurhashValid, type RGB } from './utils';\n\nexport interface BlurhashProps extends Omit<ViewProps, 'children'> {\n\t/**\n\t * The blurhash string to use. Example: `LGFFaXYk^6#M@-5c,1J5@[or[Q6`.\n\t */\n\tblurhash: string;\n\t/**\n\t * The width (resolution) to decode to. Higher values decrease performance, use `16` for large lists, otherwise you can increase it to `32`.\n\t * @default 32\n\t */\n\tdecodeWidth?: number;\n\t/**\n\t * The height (resolution) to decode to. Higher values decrease performance, use `16` for large lists, otherwise you can increase it to `32`.\n\t * @default 32\n\t */\n\tdecodeHeight?: number;\n\t/**\n\t * Adjusts the contrast of the output image. Tweak it if you want a different look for your placeholders.\n\t * @default 1.0\n\t */\n\tdecodePunch?: number;\n\t/**\n\t * Asynchronously decode the Blurhash on a background Thread instead of the UI-Thread.\n\t * Read the [performance documentation](https://github.com/mrousavy/react-native-blurhash#performance)\n\t * before enabling this.\n\t * @default false\n\t */\n\tdecodeAsync?: boolean;\n\t/**\n\t * Adjusts the resize mode of the image.\n\t * @default 'cover'\n\t */\n\tresizeMode?: 'cover' | 'contain' | 'stretch' | 'center';\n\n\t/**\n\t * Emitted when the Blurhash received new parameters and started to decode the given `blurhash` string.\n\t */\n\tonLoadStart?: () => void;\n\n\t/**\n\t * Emitted when the Blurhash successfully decoded the given `blurhash` string and rendered the image to the `<Blurhash>` view.\n\t */\n\tonLoadEnd?: () => void;\n\n\t/**\n\t * Emitted when the Blurhash failed to decode/load.\n\t */\n\tonLoadError?: (message?: string) => void;\n}\n\nexport class Blurhash extends React.PureComponent<BlurhashProps> {\n\tstatic displayName = 'Blurhash';\n\n\tconstructor(props: BlurhashProps) {\n\t\tsuper(props);\n\t\tthis._onLoadStart = this._onLoadStart.bind(this);\n\t\tthis._onLoadEnd = this._onLoadEnd.bind(this);\n\t\tthis._onLoadError = this._onLoadError.bind(this);\n\t}\n\n\t/**\n\t * Encodes the given image URI to a blurhash string\n\t * @param imageUri An URI to an Image parseable by the react native image loader\n\t * @param componentsX The number of X components\n\t * @param componentsY The number of Y components\n\t * @example\n\t * const blurhash = await Blurhash.encode('https://blurha.sh/assets/images/img2.jpg')\n\t */\n\tstatic encode(imageUri: string, componentsX: number, componentsY: number): Promise<string> {\n\t\tif (typeof imageUri !== 'string') throw new Error('imageUri must be a non-empty string!');\n\t\tif (typeof componentsX !== 'number') throw new Error('componentsX must be a valid positive number!');\n\t\tif (typeof componentsY !== 'number') throw new Error('componentsY must be a valid positive number!');\n\n\t\treturn NativeBlurhashModule.createBlurhashFromImage(imageUri, componentsX, componentsY);\n\t}\n\n\t/**\n\t * Gets the average color in a given blurhash string.\n\t *\n\t * This uses the JS blurhash decoder, so it might be slow.\n\t * @param blurhash The blurhash string\n\t * @example\n\t * const averageColor = Blurhash.getAverageColor(`LGFFaXYk^6#M@-5c,1J5@[or[Q6.`)\n\t */\n\tstatic getAverageColor(blurhash: string): RGB | undefined {\n\t\tif (blurhash == null || blurhash.length < 7) return undefined;\n\n\t\tconst value = decode83(blurhash.substring(2, 6));\n\t\treturn decodeDC(value);\n\t}\n\n\t/**\n\t * Clears the cosine cache and frees up memory.\n\t *\n\t * @platform Android\n\t * @see https://github.com/mrousavy/react-native-blurhash#cosine-operations\n\t */\n\tstatic clearCosineCache(): void {\n\t\tif (Platform.OS === 'android') NativeBlurhashModule.clearCosineCache();\n\t\telse console.warn('Blurhash.clearCosineCache is only available on Android.');\n\t}\n\n\t/**\n\t * Verifies if the given blurhash is valid by checking it's type, length and size flag.\n\t *\n\t * This uses the JS blurhash decoder, so it might be slow.\n\t * @param blurhash The given blurhash string\n\t */\n\tstatic isBlurhashValid(blurhash: string): ReturnType<typeof isBlurhashValid> {\n\t\treturn isBlurhashValid(blurhash);\n\t}\n\n\t_onLoadStart() {\n\t\tif (this.props.onLoadStart != null) this.props.onLoadStart();\n\t}\n\t_onLoadEnd() {\n\t\tif (this.props.onLoadEnd != null) this.props.onLoadEnd();\n\t}\n\t_onLoadError(event?: NativeSyntheticEvent<{ message?: string }>) {\n\t\tif (this.props.onLoadError != null) this.props.onLoadError(event?.nativeEvent?.message);\n\t}\n\n\trender() {\n\t\treturn <NativeBlurhashView {...this.props} onLoadStart={this._onLoadStart} onLoadEnd={this._onLoadEnd} onLoadError={this._onLoadError} />;\n\t}\n}\n"],"mappings":"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"}