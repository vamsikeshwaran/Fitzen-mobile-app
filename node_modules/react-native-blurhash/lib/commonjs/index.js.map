{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_NativeBlurhashModule","_interopRequireDefault","_NativeBlurhashView","_utils","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_extends","assign","bind","target","arguments","length","source","key","apply","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","_toPrimitive","String","Symbol","toPrimitive","TypeError","Number","Blurhash","PureComponent","constructor","props","_onLoadStart","_onLoadEnd","_onLoadError","encode","imageUri","componentsX","componentsY","Error","NativeBlurhashModule","createBlurhashFromImage","getAverageColor","blurhash","undefined","decode83","substring","decodeDC","clearCosineCache","Platform","OS","console","warn","isBlurhashValid","onLoadStart","onLoadEnd","event","_event$nativeEvent","onLoadError","nativeEvent","message","render","createElement","exports"],"sources":["index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, type NativeSyntheticEvent, type ViewProps } from 'react-native';\nimport NativeBlurhashModule from './specs/NativeBlurhashModule';\nimport NativeBlurhashView from './specs/NativeBlurhashView';\nimport { decode83, decodeDC, isBlurhashValid, type RGB } from './utils';\n\nexport interface BlurhashProps extends Omit<ViewProps, 'children'> {\n\t/**\n\t * The blurhash string to use. Example: `LGFFaXYk^6#M@-5c,1J5@[or[Q6`.\n\t */\n\tblurhash: string;\n\t/**\n\t * The width (resolution) to decode to. Higher values decrease performance, use `16` for large lists, otherwise you can increase it to `32`.\n\t * @default 32\n\t */\n\tdecodeWidth?: number;\n\t/**\n\t * The height (resolution) to decode to. Higher values decrease performance, use `16` for large lists, otherwise you can increase it to `32`.\n\t * @default 32\n\t */\n\tdecodeHeight?: number;\n\t/**\n\t * Adjusts the contrast of the output image. Tweak it if you want a different look for your placeholders.\n\t * @default 1.0\n\t */\n\tdecodePunch?: number;\n\t/**\n\t * Asynchronously decode the Blurhash on a background Thread instead of the UI-Thread.\n\t * Read the [performance documentation](https://github.com/mrousavy/react-native-blurhash#performance)\n\t * before enabling this.\n\t * @default false\n\t */\n\tdecodeAsync?: boolean;\n\t/**\n\t * Adjusts the resize mode of the image.\n\t * @default 'cover'\n\t */\n\tresizeMode?: 'cover' | 'contain' | 'stretch' | 'center';\n\n\t/**\n\t * Emitted when the Blurhash received new parameters and started to decode the given `blurhash` string.\n\t */\n\tonLoadStart?: () => void;\n\n\t/**\n\t * Emitted when the Blurhash successfully decoded the given `blurhash` string and rendered the image to the `<Blurhash>` view.\n\t */\n\tonLoadEnd?: () => void;\n\n\t/**\n\t * Emitted when the Blurhash failed to decode/load.\n\t */\n\tonLoadError?: (message?: string) => void;\n}\n\nexport class Blurhash extends React.PureComponent<BlurhashProps> {\n\tstatic displayName = 'Blurhash';\n\n\tconstructor(props: BlurhashProps) {\n\t\tsuper(props);\n\t\tthis._onLoadStart = this._onLoadStart.bind(this);\n\t\tthis._onLoadEnd = this._onLoadEnd.bind(this);\n\t\tthis._onLoadError = this._onLoadError.bind(this);\n\t}\n\n\t/**\n\t * Encodes the given image URI to a blurhash string\n\t * @param imageUri An URI to an Image parseable by the react native image loader\n\t * @param componentsX The number of X components\n\t * @param componentsY The number of Y components\n\t * @example\n\t * const blurhash = await Blurhash.encode('https://blurha.sh/assets/images/img2.jpg')\n\t */\n\tstatic encode(imageUri: string, componentsX: number, componentsY: number): Promise<string> {\n\t\tif (typeof imageUri !== 'string') throw new Error('imageUri must be a non-empty string!');\n\t\tif (typeof componentsX !== 'number') throw new Error('componentsX must be a valid positive number!');\n\t\tif (typeof componentsY !== 'number') throw new Error('componentsY must be a valid positive number!');\n\n\t\treturn NativeBlurhashModule.createBlurhashFromImage(imageUri, componentsX, componentsY);\n\t}\n\n\t/**\n\t * Gets the average color in a given blurhash string.\n\t *\n\t * This uses the JS blurhash decoder, so it might be slow.\n\t * @param blurhash The blurhash string\n\t * @example\n\t * const averageColor = Blurhash.getAverageColor(`LGFFaXYk^6#M@-5c,1J5@[or[Q6.`)\n\t */\n\tstatic getAverageColor(blurhash: string): RGB | undefined {\n\t\tif (blurhash == null || blurhash.length < 7) return undefined;\n\n\t\tconst value = decode83(blurhash.substring(2, 6));\n\t\treturn decodeDC(value);\n\t}\n\n\t/**\n\t * Clears the cosine cache and frees up memory.\n\t *\n\t * @platform Android\n\t * @see https://github.com/mrousavy/react-native-blurhash#cosine-operations\n\t */\n\tstatic clearCosineCache(): void {\n\t\tif (Platform.OS === 'android') NativeBlurhashModule.clearCosineCache();\n\t\telse console.warn('Blurhash.clearCosineCache is only available on Android.');\n\t}\n\n\t/**\n\t * Verifies if the given blurhash is valid by checking it's type, length and size flag.\n\t *\n\t * This uses the JS blurhash decoder, so it might be slow.\n\t * @param blurhash The given blurhash string\n\t */\n\tstatic isBlurhashValid(blurhash: string): ReturnType<typeof isBlurhashValid> {\n\t\treturn isBlurhashValid(blurhash);\n\t}\n\n\t_onLoadStart() {\n\t\tif (this.props.onLoadStart != null) this.props.onLoadStart();\n\t}\n\t_onLoadEnd() {\n\t\tif (this.props.onLoadEnd != null) this.props.onLoadEnd();\n\t}\n\t_onLoadError(event?: NativeSyntheticEvent<{ message?: string }>) {\n\t\tif (this.props.onLoadError != null) this.props.onLoadError(event?.nativeEvent?.message);\n\t}\n\n\trender() {\n\t\treturn <NativeBlurhashView {...this.props} onLoadStart={this._onLoadStart} onLoadEnd={this._onLoadEnd} onLoadError={this._onLoadError} />;\n\t}\n}\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,qBAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,mBAAA,GAAAD,sBAAA,CAAAH,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AAAwE,SAAAG,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAAA,SAAAG,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAX,wBAAAW,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAH,UAAA,SAAAG,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAF,OAAA,EAAAE,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAC,GAAA,CAAAJ,CAAA,UAAAG,CAAA,CAAAE,GAAA,CAAAL,CAAA,OAAAM,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAZ,CAAA,oBAAAY,CAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAf,CAAA,EAAAY,CAAA,SAAAI,CAAA,GAAAR,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAX,CAAA,EAAAY,CAAA,UAAAI,CAAA,KAAAA,CAAA,CAAAX,GAAA,IAAAW,CAAA,CAAAC,GAAA,IAAAR,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAI,CAAA,IAAAV,CAAA,CAAAM,CAAA,IAAAZ,CAAA,CAAAY,CAAA,YAAAN,CAAA,CAAAR,OAAA,GAAAE,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAc,GAAA,CAAAjB,CAAA,EAAAM,CAAA,GAAAA,CAAA;AAAA,SAAAY,SAAA,IAAAA,QAAA,GAAAT,MAAA,CAAAU,MAAA,GAAAV,MAAA,CAAAU,MAAA,CAAAC,IAAA,eAAAC,MAAA,aAAAL,CAAA,MAAAA,CAAA,GAAAM,SAAA,CAAAC,MAAA,EAAAP,CAAA,UAAAQ,MAAA,GAAAF,SAAA,CAAAN,CAAA,YAAAS,GAAA,IAAAD,MAAA,QAAAf,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAS,MAAA,EAAAC,GAAA,KAAAJ,MAAA,CAAAI,GAAA,IAAAD,MAAA,CAAAC,GAAA,gBAAAJ,MAAA,YAAAH,QAAA,CAAAQ,KAAA,OAAAJ,SAAA;AAAA,SAAAK,gBAAA/B,GAAA,EAAA6B,GAAA,EAAAG,KAAA,IAAAH,GAAA,GAAAI,cAAA,CAAAJ,GAAA,OAAAA,GAAA,IAAA7B,GAAA,IAAAa,MAAA,CAAAC,cAAA,CAAAd,GAAA,EAAA6B,GAAA,IAAAG,KAAA,EAAAA,KAAA,EAAAE,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAApC,GAAA,CAAA6B,GAAA,IAAAG,KAAA,WAAAhC,GAAA;AAAA,SAAAiC,eAAA1B,CAAA,QAAAa,CAAA,GAAAiB,YAAA,CAAA9B,CAAA,uCAAAa,CAAA,GAAAA,CAAA,GAAAkB,MAAA,CAAAlB,CAAA;AAAA,SAAAiB,aAAA9B,CAAA,EAAAD,CAAA,2BAAAC,CAAA,KAAAA,CAAA,SAAAA,CAAA,MAAAH,CAAA,GAAAG,CAAA,CAAAgC,MAAA,CAAAC,WAAA,kBAAApC,CAAA,QAAAgB,CAAA,GAAAhB,CAAA,CAAAe,IAAA,CAAAZ,CAAA,EAAAD,CAAA,uCAAAc,CAAA,SAAAA,CAAA,YAAAqB,SAAA,yEAAAnC,CAAA,GAAAgC,MAAA,GAAAI,MAAA,EAAAnC,CAAA;AAmDjE,MAAMoC,QAAQ,SAASnD,KAAK,CAACoD,aAAa,CAAgB;EAGhEC,WAAWA,CAACC,KAAoB,EAAE;IACjC,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACvB,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACwB,UAAU,GAAG,IAAI,CAACA,UAAU,CAACxB,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACyB,YAAY,GAAG,IAAI,CAACA,YAAY,CAACzB,IAAI,CAAC,IAAI,CAAC;EACjD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAO0B,MAAMA,CAACC,QAAgB,EAAEC,WAAmB,EAAEC,WAAmB,EAAmB;IAC1F,IAAI,OAAOF,QAAQ,KAAK,QAAQ,EAAE,MAAM,IAAIG,KAAK,CAAC,sCAAsC,CAAC;IACzF,IAAI,OAAOF,WAAW,KAAK,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;IACpG,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;IAEpG,OAAOC,6BAAoB,CAACC,uBAAuB,CAACL,QAAQ,EAAEC,WAAW,EAAEC,WAAW,CAAC;EACxF;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOI,eAAeA,CAACC,QAAgB,EAAmB;IACzD,IAAIA,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAAC/B,MAAM,GAAG,CAAC,EAAE,OAAOgC,SAAS;IAE7D,MAAM3B,KAAK,GAAG,IAAA4B,eAAQ,EAACF,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,OAAO,IAAAC,eAAQ,EAAC9B,KAAK,CAAC;EACvB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,OAAO+B,gBAAgBA,CAAA,EAAS;IAC/B,IAAIC,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAEV,6BAAoB,CAACQ,gBAAgB,CAAC,CAAC,CAAC,KAClEG,OAAO,CAACC,IAAI,CAAC,yDAAyD,CAAC;EAC7E;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,OAAOC,eAAeA,CAACV,QAAgB,EAAsC;IAC5E,OAAO,IAAAU,sBAAe,EAACV,QAAQ,CAAC;EACjC;EAEAX,YAAYA,CAAA,EAAG;IACd,IAAI,IAAI,CAACD,KAAK,CAACuB,WAAW,IAAI,IAAI,EAAE,IAAI,CAACvB,KAAK,CAACuB,WAAW,CAAC,CAAC;EAC7D;EACArB,UAAUA,CAAA,EAAG;IACZ,IAAI,IAAI,CAACF,KAAK,CAACwB,SAAS,IAAI,IAAI,EAAE,IAAI,CAACxB,KAAK,CAACwB,SAAS,CAAC,CAAC;EACzD;EACArB,YAAYA,CAACsB,KAAkD,EAAE;IAAA,IAAAC,kBAAA;IAChE,IAAI,IAAI,CAAC1B,KAAK,CAAC2B,WAAW,IAAI,IAAI,EAAE,IAAI,CAAC3B,KAAK,CAAC2B,WAAW,CAACF,KAAK,aAALA,KAAK,gBAAAC,kBAAA,GAALD,KAAK,CAAEG,WAAW,cAAAF,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,CAAC;EACxF;EAEAC,MAAMA,CAAA,EAAG;IACR,oBAAOpF,KAAA,CAAAqF,aAAA,CAAC/E,mBAAA,CAAAI,OAAkB,EAAAoB,QAAA,KAAK,IAAI,CAACwB,KAAK;MAAEuB,WAAW,EAAE,IAAI,CAACtB,YAAa;MAACuB,SAAS,EAAE,IAAI,CAACtB,UAAW;MAACyB,WAAW,EAAE,IAAI,CAACxB;IAAa,EAAE,CAAC;EAC1I;AACD;AAAC6B,OAAA,CAAAnC,QAAA,GAAAA,QAAA;AAAAZ,eAAA,CA3EYY,QAAQ,iBACC,UAAU"}